# .github/workflows/release.yml
name: BudgetBuddy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, mysql
        coverage: xdebug
    
    - name: Install Composer dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --prefer-dist --no-progress
        fi
    
    - name: Run PHP CodeSniffer
      run: |
        if [ -f vendor/bin/phpcs ]; then
          vendor/bin/phpcs --standard=WordPress .
        fi
    
    - name: Run PHPUnit tests
      run: |
        if [ -f vendor/bin/phpunit ]; then
          vendor/bin/phpunit
        fi

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github
    
    - name: Get next version
      id: version
      run: |
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Get the last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
        echo "Last tag: $LAST_TAG"
        
        # Extract version numbers
        IFS='.' read -ra VERSION_PARTS <<< "${LAST_TAG#v}"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"
    
    - name: Update plugin version in main file
      run: |
        # Find the main plugin file (usually the one with plugin header)
        PLUGIN_FILE=$(find . -maxdepth 1 -name "*.php" -exec grep -l "Plugin Name:" {} \; | head -1)
        
        if [ -z "$PLUGIN_FILE" ]; then
          echo "No main plugin file found. Looking for common patterns..."
          PLUGIN_FILE=$(find . -maxdepth 1 -name "*.php" | head -1)
        fi
        
        echo "Updating version in: $PLUGIN_FILE"
        
        # Update version in plugin header
        sed -i "s/Version: .*/Version: ${{ steps.version.outputs.new_version }}/" "$PLUGIN_FILE"
        
        # Update version in PHP constant if exists
        sed -i "s/define.*VERSION.*['\"].*['\"].*/define( 'PLUGIN_VERSION', '${{ steps.version.outputs.new_version }}' );/" "$PLUGIN_FILE"
    
    - name: Update version in readme.txt
      run: |
        if [ -f readme.txt ]; then
          sed -i "s/Stable tag: .*/Stable tag: ${{ steps.version.outputs.new_version }}/" readme.txt
        fi
    
    - name: Update version in package.json
      run: |
        if [ -f package.json ]; then
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
        fi
    
    - name: Update CHANGELOG
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Add new version entry
        TODAY=$(date +%Y-%m-%d)
        sed -i "3i\\## [${{ steps.version.outputs.new_version }}] - $TODAY\n" CHANGELOG.md
        
        # Add commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
        echo "### Changes" >> temp_changelog.md
        git log $LAST_TAG..HEAD --pretty=format:"- %s" >> temp_changelog.md
        echo "" >> temp_changelog.md
        
        # Insert into CHANGELOG
        sed -i "/## \[${{ steps.version.outputs.new_version }}\]/r temp_changelog.md" CHANGELOG.md
        rm temp_changelog.md
    
    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || exit 0
        git push
    
    - name: Create Release Tag
      run: |
        git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release version ${{ steps.version.outputs.new_version }}"
        git push origin "v${{ steps.version.outputs.new_version }}"
    
    - name: Build plugin ZIP
      run: |
        # Create build directory
        mkdir -p build
        
        # Get plugin directory name (usually the repo name)
        PLUGIN_NAME=$(basename $GITHUB_REPOSITORY)
        
        # Copy plugin files (exclude development files)
        rsync -av --progress . build/$PLUGIN_NAME \
          --exclude .git \
          --exclude .github \
          --exclude node_modules \
          --exclude .gitignore \
          --exclude README.md \
          --exclude package.json \
          --exclude package-lock.json \
          --exclude composer.json \
          --exclude composer.lock \
          --exclude phpunit.xml \
          --exclude tests \
          --exclude build
        
        # Create ZIP file
        cd build
        zip -r "../${PLUGIN_NAME}-${{ steps.version.outputs.new_version }}.zip" $PLUGIN_NAME
        cd ..
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        release_name: Release v${{ steps.version.outputs.new_version }}
        body: |
          ## Changes in v${{ steps.version.outputs.new_version }}
          
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ## Installation
          1. Download the ZIP file below
          2. Upload to WordPress admin → Plugins → Add New → Upload Plugin
          3. Activate the plugin
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}-${{ steps.version.outputs.new_version }}.zip
        asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.new_version }}.zip
        asset_content_type: application/zip

  # Optional: Deploy to WordPress.org repository
  wordpress-deploy:
    needs: [test, release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: WordPress Plugin Deploy
      uses: 10up/action-wordpress-plugin-deploy@stable
      env:
        SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
        SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
        SLUG: your-plugin-slug # Replace with your plugin slug